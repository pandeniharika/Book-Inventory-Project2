{"version":3,"sources":["components/add-mybook.component.js","http-common.js","services/mybook.service.js","components/mybook.component.js","components/mybooks-list.component.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","AddMybook","axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","Mybook","props","onChangeTitle","bind","onChangeDescription","getMybook","updatePublished","updateMybook","deleteMybook","state","currentMybook","description","published","message","this","params","e","target","value","setState","prevState","MybookDataService","then","response","console","log","catch","status","update","history","push","className","htmlFor","type","onChange","onClick","Component","MybooksList","onChangeSearchTitle","retrieveMybooks","refreshList","setActiveMybook","removeAllMybooks","searchTitle","mybooks","currentIndex","getAll","mybook","index","deleteAll","findByTitle","placeholder","map","to","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.1eaee660.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\nimport AddMybook from \"../App\";\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            \r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n\r\n}\r\nexport default AddMybook;","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:8080/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});","import http from \"../http-common\";\r\n\r\nclass MybookDataService {\r\n  getAll() {\r\n    return http.get(\"/mybooks\");\r\n  }\r\n\r\n  get(id) {\r\n    return http.get(`/mybooks/${id}`);\r\n  }\r\n\r\n  create(data) {\r\n    return http.post(\"/mybooks\", data);\r\n  }\r\n\r\n  update(id, data) {\r\n    return http.put(`/mybooks/${id}`, data);\r\n  }\r\n\r\n  delete(id) {\r\n    return http.delete(`/mybooks/${id}`);\r\n  }\r\n\r\n  deleteAll() {\r\n    return http.delete(`/mybooks`);\r\n  }\r\n\r\n  findByTitle(title) {\r\n    return http.get(`/mybooks?title=${title}`);\r\n  }\r\n}\r\n\r\nexport default new MybookDataService();","import React, { Component } from \"react\";\r\nimport MybookDataService from \"../services/mybook.service\";\r\n\r\nexport default class Mybook extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeTitle = this.onChangeTitle.bind(this);\r\n    this.onChangeDescription = this.onChangeDescription.bind(this);\r\n    this.getMybook = this.getMybook.bind(this);\r\n    this.updatePublished = this.updatePublished.bind(this);\r\n    this.updateMybook = this.updateMybook.bind(this);\r\n    this.deleteMybook = this.deleteMybook.bind(this);\r\n\r\n    this.state = {\r\n      currentMybook: {\r\n        id: null,\r\n        title: \"\",\r\n        description: \"\",\r\n        published: false\r\n      },\r\n      message: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMybook(this.props.match.params.id);\r\n  }\r\n\r\n  onChangeTitle(e) {\r\n    const title = e.target.value;\r\n\r\n    this.setState(function(prevState) {\r\n      return {\r\n        currentMybook: {\r\n          ...prevState.currentMybook,\r\n          title: title\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  onChangeDescription(e) {\r\n    const description = e.target.value;\r\n    \r\n    this.setState(prevState => ({\r\n      currentMybook: {\r\n        ...prevState.currentMybook,\r\n        description: description\r\n      }\r\n    }));\r\n  }\r\n\r\n  getMybook(id) {\r\n    MybookDataService.get(id)\r\n      .then(response => {\r\n        this.setState({\r\n          currentMybook: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updatePublished(status) {\r\n    var data = {\r\n      id: this.state.currentMybook.id,\r\n      title: this.state.currentMybook.title,\r\n      description: this.state.currentMybook.description,\r\n      published: status\r\n    };\r\n\r\n    MybookDataService.update(this.state.currentMybook.id, data)\r\n      .then(response => {\r\n        this.setState(prevState => ({\r\n          currentMybook: {\r\n            ...prevState.currentMybook,\r\n            published: status\r\n          }\r\n        }));\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updateMybook() {\r\n    MybookDataService.update(\r\n      this.state.currentMybook.id,\r\n      this.state.currentMybook\r\n    )\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.setState({\r\n          message: \"The mybook was updated successfully!\"\r\n        });\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  deleteMybook() {    \r\n    MybookDataService.delete(this.state.currentMybook.id)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.props.history.push('/mybooks')\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    // ...\r\n    const { currentMybook } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        {currentMybook ? (\r\n          <div className=\"edit-form\">\r\n            <h4>Mybook</h4>\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"title\">Title</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"title\"\r\n                  value={currentMybook.title}\r\n                  onChange={this.onChangeTitle}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"description\"\r\n                  value={currentMybook.description}\r\n                  onChange={this.onChangeDescription}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  <strong>Status:</strong>\r\n                </label>\r\n                {currentMybook.published ? \"Published\" : \"Pending\"}\r\n              </div>\r\n            </form>\r\n\r\n            {currentMybook.published ? (\r\n              <button\r\n                className=\"badge badge-primary mr-2\"\r\n                onClick={() => this.updatePublished(false)}\r\n              >\r\n                UnPublish\r\n              </button>\r\n            ) : (\r\n              <button\r\n                className=\"badge badge-primary mr-2\"\r\n                onClick={() => this.updatePublished(true)}\r\n              >\r\n                Publish\r\n              </button>\r\n            )}\r\n\r\n            <button\r\n              className=\"badge badge-danger mr-2\"\r\n              onClick={this.deleteMybook}\r\n            >\r\n              Delete\r\n            </button>\r\n\r\n            <button\r\n              type=\"submit\"\r\n              className=\"badge badge-success\"\r\n              onClick={this.updateMybook}\r\n            >\r\n              Update\r\n            </button>\r\n            <p>{this.state.message}</p>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <br />\r\n            <p>Please click on a Mybook...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport MybookDataService from \"../services/mybook.service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class MybooksList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\r\n    this.retrieveMybooks = this.retrieveMybooks.bind(this);\r\n    this.refreshList = this.refreshList.bind(this);\r\n    this.setActiveMybook = this.setActiveMybook.bind(this);\r\n    this.removeAllMybooks = this.removeAllMybooks.bind(this);\r\n    this.searchTitle = this.searchTitle.bind(this);\r\n\r\n    this.state = {\r\n      mybooks: [],\r\n      currentMybook: null,\r\n      currentIndex: -1,\r\n      searchTitle: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.retrieveMybooks();\r\n  }\r\n\r\n  onChangeSearchTitle(e) {\r\n    const searchTitle = e.target.value;\r\n\r\n    this.setState({\r\n      searchTitle: searchTitle\r\n    });\r\n  }\r\n\r\n  retrieveMybooks() {\r\n    MybookDataService.getAll()\r\n      .then(response => {\r\n        this.setState({\r\n          mybooks: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  refreshList() {\r\n    this.retrieveMybooks();\r\n    this.setState({\r\n      currentMybook: null,\r\n      currentIndex: -1\r\n    });\r\n  }\r\n\r\n  setActiveMybook(mybook, index) {\r\n    this.setState({\r\n      currentMybook: mybook,\r\n      currentIndex: index\r\n    });\r\n  }\r\n\r\n  removeAllMybooks() {\r\n    MybookDataService.deleteAll()\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.refreshList();\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  searchTitle() {\r\n    MybookDataService.findByTitle(this.state.searchTitle)\r\n      .then(response => {\r\n        this.setState({\r\n          mybooks: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    // ...\r\n    const { searchTitle, mybooks, currentMybook, currentIndex } = this.state;\r\n\r\n    return (\r\n      <div className=\"list row\">\r\n        <div className=\"col-md-8\">\r\n          <div className=\"input-group mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Search by title\"\r\n              value={searchTitle}\r\n              onChange={this.onChangeSearchTitle}\r\n            />\r\n            <div className=\"input-group-append\">\r\n              <button\r\n                className=\"btn btn-outline-secondary\"\r\n                type=\"button\"\r\n                onClick={this.searchTitle}\r\n              >\r\n                Search\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <h4>Mybooks List</h4>\r\n\r\n          <ul className=\"list-group\">\r\n            {mybooks &&\r\n              mybooks.map((mybook, index) => (\r\n                <li\r\n                  className={\r\n                    \"list-group-item \" +\r\n                    (index === currentIndex ? \"active\" : \"\")\r\n                  }\r\n                  onClick={() => this.setActiveMybook(mybook, index)}\r\n                  key={index}\r\n                >\r\n                  {mybook.title}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n\r\n          <button\r\n            className=\"m-3 btn btn-sm btn-danger\"\r\n            onClick={this.removeAllMybooks}\r\n          >\r\n            Remove All\r\n          </button>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          {currentMybook ? (\r\n            <div>\r\n              <h4>Mybook</h4>\r\n              <div>\r\n                <label>\r\n                  <strong>Title:</strong>\r\n                </label>{\" \"}\r\n                {currentMybook.title}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Description:</strong>\r\n                </label>{\" \"}\r\n                {currentMybook.description}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Status:</strong>\r\n                </label>{\" \"}\r\n                {currentMybook.published ? \"Published\" : \"Pending\"}\r\n              </div>\r\n\r\n              <Link\r\n                to={\"/mybooks/\" + currentMybook.id}\r\n                className=\"badge badge-warning\"\r\n              >\r\n                Edit\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <br />\r\n              <p>Please click on a Mybook...</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddMybook from \"./components/add-mybook.component\";\nimport Mybook from \"./components/mybook.component\";\nimport MybooksList from \"./components/mybooks-list.component\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <Link to={\"/mybooks\"} className=\"navbar-brand\">\n            My Books Inventory\n          </Link>\n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/mybooks\"} className=\"nav-link\">\n                Mybooks\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to={\"/add\"} className=\"nav-link\">\n                Add\n              </Link>\n            </li>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={[\"/\", \"/mybooks\"]} component={MybooksList} />\n            <Route exact path=\"/add\" component={AddMybook} />\n            <Route path=\"/mybooks/:id\" component={Mybook} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            \r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n\nserviceWorker.unregister();\n\nreportWebVitals();\n"],"sourceRoot":""}